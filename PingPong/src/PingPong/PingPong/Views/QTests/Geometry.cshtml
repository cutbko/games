@model dynamic
@{
    ViewBag.Title = "Geometry library tests";
    Layout = "~/Views/Shared/_QUnitLayot.cshtml";
}

@section scripts
{
    <script src="~/Scripts/require.js" data-main="/Scripts/Modules/geometry"></script>

    <script>
        require(['geometry'], function(geometry) {

            module("circle - circle intersection");

            test("circle doesnt intersect circle", function () {
                var circle1 = new geometry.Circle(10, 10, 20);
                var circle2 = new geometry.Circle(100, 100, 20);
                ok(!circle1.intersectsCircle(circle2));
                ok(!circle2.intersectsCircle(circle1));
            });

            test("circle intersects itself", function() {
                var circle1 = new geometry.Circle(10, 10, 20);
                ok(circle1.intersectsCircle(circle1));
            });

            test("circle intersects inner and outer", function () {
                var outer = new geometry.Circle(10, 10, 20);
                var inner = new geometry.Circle(10, 10, 10);
                ok(outer.intersectsCircle(inner));
                ok(inner.intersectsCircle(outer));
            });

            test("circles intersect when touched", function () {
                var circle1 = new geometry.Circle(10, 10, 10);
                var circle2 = new geometry.Circle(20, 10, 10);
                ok(circle1.intersectsCircle(circle2));
                ok(circle2.intersectsCircle(circle1));
            });

            test("circles intersect", function () {
                var circle1 = new geometry.Circle(10, 10, 15);
                var circle2 = new geometry.Circle(20, 15, 10);
                ok(circle1.intersectsCircle(circle2));
                ok(circle2.intersectsCircle(circle1));
            });


            module("rectangle contains point");

            test("rectangle contains point", function() {
                var rec = new geometry.Rectangle(100, 100, 100, 100);

                ok(rec.containsPoint(100, 100));
                ok(rec.containsPoint(100, 200));
                ok(rec.containsPoint(200, 100));
                ok(rec.containsPoint(200, 200));

                ok(rec.containsPoint(150, 150));

                ok(!rec.containsPoint(250, 150));
            });


            module("rectangle - rectangle intersection");

            test("rectangles doesnt intersect", function () {
                var rectangle1 = new geometry.Rectangle(10, 10, 10, 10);
                var rectangle2 = new geometry.Rectangle(100, 100, 100, 100);
                ok(!rectangle1.intersectsRectangle(rectangle2));
                ok(!rectangle2.intersectsRectangle(rectangle1));
            });

            test("rectangle intersects itself", function () {
                var rectangle1 = new geometry.Rectangle(10, 10, 10, 10);
                ok(rectangle1.intersectsRectangle(rectangle1));
            });

            test("rectangle intersects inner and outer", function() {
                var inner = new geometry.Rectangle(100, 100, 100, 100);
                var outer = new geometry.Rectangle(50, 50, 200, 200);
                ok(inner.intersectsRectangle(outer));
                ok(outer.intersectsRectangle(inner));
            });

            test("rectangles intersect when touched by vertice", function () {
                var rec1 = new geometry.Rectangle(100, 100, 100, 100);
                var rec2 = new geometry.Rectangle(200, 200, 100, 100);

                ok(rec1.intersectsRectangle(rec2));
                ok(rec2.intersectsRectangle(rec1));
            });

            test("rectangles intersect when touched by edge", function () {
                var rec1 = new geometry.Rectangle(100, 100, 100, 100);
                var rec2 = new geometry.Rectangle(200, 100, 100, 100);
                var rec3 = new geometry.Rectangle(200, 150, 100, 100);

                ok(rec1.intersectsRectangle(rec2));
                ok(rec2.intersectsRectangle(rec1));

                ok(rec1.intersectsRectangle(rec3));
                ok(rec3.intersectsRectangle(rec1));
            });

            test("rectangles intersect", function () {
                var rec1 = new geometry.Rectangle(100, 100, 200, 100);
                var rec2 = new geometry.Rectangle(250, 180, 200, 100);
                var rec3 = new geometry.Rectangle(270, 160, 100, 30);

                ok(rec1.intersectsRectangle(rec2));
                ok(rec1.intersectsRectangle(rec3));

                ok(rec2.intersectsRectangle(rec1));
                ok(rec2.intersectsRectangle(rec3));

                ok(rec3.intersectsRectangle(rec1));
                ok(rec3.intersectsRectangle(rec2));
            });

            module("rectangle - circle intersection");

            test("doesn't intersect", function() {
                var rec = new geometry.Rectangle(100, 100, 100, 100);

                var circleAtRight = new geometry.Circle(250, 150, 49);
                var circleAtTop = new geometry.Circle(150, 50, 49);
                var circleAtLeft = new geometry.Circle(50, 150, 49);
                var circleAtBottom = new geometry.Circle(50, 150, 49);

                var circleAtTopRight = new geometry.Circle(250, 50, 70);
                var circleAtBottomRight = new geometry.Circle(250, 250, 70);
                var circleAtTopLeft = new geometry.Circle(50, 50, 70);
                var circleAtBottomLeft = new geometry.Circle(50, 250, 70);
                
                [circleAtRight, circleAtTop, circleAtLeft, circleAtBottom, circleAtTopRight, circleAtBottomRight, circleAtTopLeft, circleAtBottomLeft]
                    .forEach(function (circle) {
                        ok(!rec.intersectsCircle(circle));
                        ok(!circle.intersectsRectangle(rec));
                    });
            });

            test("circle touches one rectangle side", function () {
                var rec = new geometry.Rectangle(100, 100, 100, 100);

                var circleTop = new geometry.Circle(150, 75, 25);
                var circleLeft = new geometry.Circle(75, 150, 25);
                var circleBottom = new geometry.Circle(150, 225, 25);
                var circleRight = new geometry.Circle(225, 150, 25);

                [circleTop, circleLeft, circleBottom, circleRight]
                    .forEach(function (circle) {
                        ok(rec.intersectsCircle(circle));
                        ok(circle.intersectsRectangle(rec));
                    });
            });

            test("circle intersects one rectangle side", function () {
                var rec = new geometry.Rectangle(100, 100, 100, 100);

                var circleTop = new geometry.Circle(150, 75, 30);
                var circleLeft = new geometry.Circle(75, 150, 30);
                var circleBottom = new geometry.Circle(150, 225, 30);
                var circleRight = new geometry.Circle(225, 150, 30);

                [circleTop, circleLeft, circleBottom, circleRight]
                    .forEach(function (circle) {
                        ok(rec.intersectsCircle(circle));
                        ok(circle.intersectsRectangle(rec));
                    });
            });

            test("circle intersects two rectangle sides", function () {
                var rec = new geometry.Rectangle(100, 100, 100, 100);

                var circleTopLeft = new geometry.Circle(75, 75, 50);
                var circleBottomLeft = new geometry.Circle(75, 225, 50);
                var circleTopRight = new geometry.Circle(225, 75, 50);
                var circleBottomRight = new geometry.Circle(225, 225, 50);

                [circleTopLeft, circleBottomLeft, circleTopRight, circleBottomRight]
                    .forEach(function (circle) {
                        ok(rec.intersectsCircle(circle));
                        ok(circle.intersectsRectangle(rec));
                    });
            });

            test("circle inside rectangle", function () {
                var rec = new geometry.Rectangle(100, 100, 100, 100);

                var circle = new geometry.Circle(150, 150, 25);

                ok(rec.intersectsCircle(circle));
                ok(circle.intersectsRectangle(rec));
            });

            test("rectangle inside circle", function () {
                var rec = new geometry.Rectangle(100, 100, 100, 100);

                var circle = new geometry.Circle(150, 150, 100);

                ok(rec.intersectsCircle(circle));
                ok(circle.intersectsRectangle(rec));
            });
        });
    </script>
}
